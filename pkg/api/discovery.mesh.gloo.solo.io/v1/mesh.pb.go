// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.6.1
// source: github.com/solo-io/gloo-mesh/api/discovery/v1/mesh.proto

package v1

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/solo-io/gloo-mesh/pkg/api/certificates.mesh.gloo.solo.io/v1"
	v11 "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/v1"
	_ "github.com/solo-io/protoc-gen-ext/extproto"
	v1 "github.com/solo-io/skv2/pkg/api/core.skv2.solo.io/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Describes a service mesh control plane deployment.
type MeshSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes platform specific properties of the service mesh.
	//
	// Types that are assignable to Type:
	//	*MeshSpec_Istio_
	//	*MeshSpec_AwsAppMesh_
	//	*MeshSpec_Linkerd
	//	*MeshSpec_ConsulConnect
	//	*MeshSpec_Osm
	Type isMeshSpec_Type `protobuf_oneof:"type"`
	// Describes the Gloo Mesh agent if it has been installed to the managed cluster.
	AgentInfo *MeshSpec_AgentInfo `protobuf:"bytes,5,opt,name=agent_info,json=agentInfo,proto3" json:"agent_info,omitempty"`
}

func (x *MeshSpec) Reset() {
	*x = MeshSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshSpec) ProtoMessage() {}

func (x *MeshSpec) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshSpec.ProtoReflect.Descriptor instead.
func (*MeshSpec) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_rawDescGZIP(), []int{0}
}

func (m *MeshSpec) GetType() isMeshSpec_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *MeshSpec) GetIstio() *MeshSpec_Istio {
	if x, ok := x.GetType().(*MeshSpec_Istio_); ok {
		return x.Istio
	}
	return nil
}

func (x *MeshSpec) GetAwsAppMesh() *MeshSpec_AwsAppMesh {
	if x, ok := x.GetType().(*MeshSpec_AwsAppMesh_); ok {
		return x.AwsAppMesh
	}
	return nil
}

func (x *MeshSpec) GetLinkerd() *MeshSpec_LinkerdMesh {
	if x, ok := x.GetType().(*MeshSpec_Linkerd); ok {
		return x.Linkerd
	}
	return nil
}

func (x *MeshSpec) GetConsulConnect() *MeshSpec_ConsulConnectMesh {
	if x, ok := x.GetType().(*MeshSpec_ConsulConnect); ok {
		return x.ConsulConnect
	}
	return nil
}

func (x *MeshSpec) GetOsm() *MeshSpec_OSM {
	if x, ok := x.GetType().(*MeshSpec_Osm); ok {
		return x.Osm
	}
	return nil
}

func (x *MeshSpec) GetAgentInfo() *MeshSpec_AgentInfo {
	if x != nil {
		return x.AgentInfo
	}
	return nil
}

type isMeshSpec_Type interface {
	isMeshSpec_Type()
}

type MeshSpec_Istio_ struct {
	// Describes an [Istio](https://istio.io/) service mesh.
	Istio *MeshSpec_Istio `protobuf:"bytes,1,opt,name=istio,proto3,oneof"`
}

type MeshSpec_AwsAppMesh_ struct {
	// Describes an [AWS App Mesh](https://aws.amazon.com/app-mesh/) service mesh.
	AwsAppMesh *MeshSpec_AwsAppMesh `protobuf:"bytes,2,opt,name=aws_app_mesh,json=awsAppMesh,proto3,oneof"`
}

type MeshSpec_Linkerd struct {
	// Describes a [Linkerd](https://linkerd.io/) service mesh.
	Linkerd *MeshSpec_LinkerdMesh `protobuf:"bytes,3,opt,name=linkerd,proto3,oneof"`
}

type MeshSpec_ConsulConnect struct {
	// Describes a [Consul Connect](https://www.consul.io/docs/connect) service mesh.
	ConsulConnect *MeshSpec_ConsulConnectMesh `protobuf:"bytes,4,opt,name=consul_connect,json=consulConnect,proto3,oneof"`
}

type MeshSpec_Osm struct {
	// Describes an [Open Service Mesh](https://openservicemesh.io/) service mesh.
	Osm *MeshSpec_OSM `protobuf:"bytes,6,opt,name=osm,proto3,oneof"`
}

func (*MeshSpec_Istio_) isMeshSpec_Type() {}

func (*MeshSpec_AwsAppMesh_) isMeshSpec_Type() {}

func (*MeshSpec_Linkerd) isMeshSpec_Type() {}

func (*MeshSpec_ConsulConnect) isMeshSpec_Type() {}

func (*MeshSpec_Osm) isMeshSpec_Type() {}

//
//Describes the Kubernetes cluster on which the control plane for this mesh is deployed.
//Only self-hosted control planes such as Istio, Linkerd, OSM, and ConsulConnect will have installation metadata.
type MeshInstallation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Namespace in which the control plane has been installed.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The Gloo Mesh cluster in which the control plane has been installed.
	Cluster string `protobuf:"bytes,2,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// The labels on the control plane pods (read from the deployment).
	PodLabels map[string]string `protobuf:"bytes,3,rep,name=pod_labels,json=podLabels,proto3" json:"pod_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The version of the Mesh that has been installed, which is determined using the image tag on the
	// mesh's primary control plane image (e.g. the istio-pilot image tag).
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// The region of the cluster in which the control plane has been installed, which is
	// determined from the value of the [Kubernetes region topology label](https://kubernetes.io/docs/reference/labels-annotations-taints/#topologykubernetesioregion)
	// on any Kubernetes node associated with the cluster of this mesh.
	Region string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *MeshInstallation) Reset() {
	*x = MeshInstallation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshInstallation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshInstallation) ProtoMessage() {}

func (x *MeshInstallation) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshInstallation.ProtoReflect.Descriptor instead.
func (*MeshInstallation) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_rawDescGZIP(), []int{1}
}

func (x *MeshInstallation) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *MeshInstallation) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *MeshInstallation) GetPodLabels() map[string]string {
	if x != nil {
		return x.PodLabels
	}
	return nil
}

func (x *MeshInstallation) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *MeshInstallation) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

type MeshStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The observed generation of the Mesh.
	// When this matches the Mesh's metadata.generation, it indicates that Gloo Mesh
	// has processed the latest version of the Mesh.
	ObservedGeneration int64 `protobuf:"varint,1,opt,name=observed_generation,json=observedGeneration,proto3" json:"observed_generation,omitempty"`
	// The VirtualMesh, if any, which contains this Mesh.
	AppliedVirtualMesh *MeshStatus_AppliedVirtualMesh `protobuf:"bytes,2,opt,name=applied_virtual_mesh,json=appliedVirtualMesh,proto3" json:"applied_virtual_mesh,omitempty"`
	// The VirtualDestinations, if any, which apply to this Mesh.
	AppliedVirtualDestinations []*MeshStatus_AppliedVirtualDestination `protobuf:"bytes,3,rep,name=applied_virtual_destinations,json=appliedVirtualDestinations,proto3" json:"applied_virtual_destinations,omitempty"`
	// The Destination(s) acting as ingress gateways for east west traffic.
	AppliedEastWestIngressGateways []*MeshStatus_AppliedIngressGateway `protobuf:"bytes,4,rep,name=applied_east_west_ingress_gateways,json=appliedEastWestIngressGateways,proto3" json:"applied_east_west_ingress_gateways,omitempty"`
}

func (x *MeshStatus) Reset() {
	*x = MeshStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshStatus) ProtoMessage() {}

func (x *MeshStatus) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshStatus.ProtoReflect.Descriptor instead.
func (*MeshStatus) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_rawDescGZIP(), []int{2}
}

func (x *MeshStatus) GetObservedGeneration() int64 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

func (x *MeshStatus) GetAppliedVirtualMesh() *MeshStatus_AppliedVirtualMesh {
	if x != nil {
		return x.AppliedVirtualMesh
	}
	return nil
}

func (x *MeshStatus) GetAppliedVirtualDestinations() []*MeshStatus_AppliedVirtualDestination {
	if x != nil {
		return x.AppliedVirtualDestinations
	}
	return nil
}

func (x *MeshStatus) GetAppliedEastWestIngressGateways() []*MeshStatus_AppliedIngressGateway {
	if x != nil {
		return x.AppliedEastWestIngressGateways
	}
	return nil
}

// Describes an Istio deployment.
type MeshSpec_Istio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes the Istio control plane deployment.
	Installation *MeshInstallation `protobuf:"bytes,1,opt,name=installation,proto3" json:"installation,omitempty"`
	// The Istio trust domain used for https/[spiffe](https://spiffe.io/spiffe/concepts/#trust-domain) [identity](https://istio.io/docs/reference/glossary/#identity).
	// If empty will default to ["cluster.local"](https://github.com/istio/istio/blob/e768f408a7de224e64ccdfb2634442541ce08e6a/pilot/cmd/pilot-agent/main.go#L118).
	TrustDomain string `protobuf:"bytes,2,opt,name=trust_domain,json=trustDomain,proto3" json:"trust_domain,omitempty"`
	// The istiod service account which determines identity for the Istio CA cert.
	IstiodServiceAccount string `protobuf:"bytes,3,opt,name=istiod_service_account,json=istiodServiceAccount,proto3" json:"istiod_service_account,omitempty"`
	// DEPRECATED: external address data for an ingress gateway destination and workload live in the relevant Destination and Workload objects.
	// Describes the ingress gateway.
	IngressGateways []*MeshSpec_Istio_IngressGatewayInfo `protobuf:"bytes,4,rep,name=ingress_gateways,json=ingressGateways,proto3" json:"ingress_gateways,omitempty"`
	// True if smart DNS proxying is enabled, which allows for arbitrary DNS domains.
	SmartDnsProxyingEnabled bool `protobuf:"varint,5,opt,name=smart_dns_proxying_enabled,json=smartDnsProxyingEnabled,proto3" json:"smart_dns_proxying_enabled,omitempty"`
}

func (x *MeshSpec_Istio) Reset() {
	*x = MeshSpec_Istio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshSpec_Istio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshSpec_Istio) ProtoMessage() {}

func (x *MeshSpec_Istio) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshSpec_Istio.ProtoReflect.Descriptor instead.
func (*MeshSpec_Istio) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_rawDescGZIP(), []int{0, 0}
}

func (x *MeshSpec_Istio) GetInstallation() *MeshInstallation {
	if x != nil {
		return x.Installation
	}
	return nil
}

func (x *MeshSpec_Istio) GetTrustDomain() string {
	if x != nil {
		return x.TrustDomain
	}
	return ""
}

func (x *MeshSpec_Istio) GetIstiodServiceAccount() string {
	if x != nil {
		return x.IstiodServiceAccount
	}
	return ""
}

func (x *MeshSpec_Istio) GetIngressGateways() []*MeshSpec_Istio_IngressGatewayInfo {
	if x != nil {
		return x.IngressGateways
	}
	return nil
}

func (x *MeshSpec_Istio) GetSmartDnsProxyingEnabled() bool {
	if x != nil {
		return x.SmartDnsProxyingEnabled
	}
	return false
}

// Describes an AWS App Mesh instance.
type MeshSpec_AwsAppMesh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The AWS name for the App Mesh instance, must be unique across all AppMesh instances owned by the AWS account.
	AwsName string `protobuf:"bytes,1,opt,name=aws_name,json=awsName,proto3" json:"aws_name,omitempty"`
	// The AWS region the App Mesh control plane resources exist in.
	Region string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	// The AWS Account ID associated with the Mesh. Populated at REST API registration time.
	AwsAccountId string `protobuf:"bytes,3,opt,name=aws_account_id,json=awsAccountId,proto3" json:"aws_account_id,omitempty"`
	// The unique AWS ARN associated with the App Mesh instance.
	Arn string `protobuf:"bytes,4,opt,name=arn,proto3" json:"arn,omitempty"`
	// The Kubernetes clusters on which sidecars for this App Mesh instance have been discovered.
	Clusters []string `protobuf:"bytes,5,rep,name=clusters,proto3" json:"clusters,omitempty"`
}

func (x *MeshSpec_AwsAppMesh) Reset() {
	*x = MeshSpec_AwsAppMesh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshSpec_AwsAppMesh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshSpec_AwsAppMesh) ProtoMessage() {}

func (x *MeshSpec_AwsAppMesh) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshSpec_AwsAppMesh.ProtoReflect.Descriptor instead.
func (*MeshSpec_AwsAppMesh) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_rawDescGZIP(), []int{0, 1}
}

func (x *MeshSpec_AwsAppMesh) GetAwsName() string {
	if x != nil {
		return x.AwsName
	}
	return ""
}

func (x *MeshSpec_AwsAppMesh) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *MeshSpec_AwsAppMesh) GetAwsAccountId() string {
	if x != nil {
		return x.AwsAccountId
	}
	return ""
}

func (x *MeshSpec_AwsAppMesh) GetArn() string {
	if x != nil {
		return x.Arn
	}
	return ""
}

func (x *MeshSpec_AwsAppMesh) GetClusters() []string {
	if x != nil {
		return x.Clusters
	}
	return nil
}

// Describes a Linkerd deployment.
type MeshSpec_LinkerdMesh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes the Linkerd control plane deployment.
	Installation *MeshInstallation `protobuf:"bytes,1,opt,name=installation,proto3" json:"installation,omitempty"`
	// The cluster domain suffix this Linkerd mesh is configured with. See [this reference](https://linkerd.io/2/tasks/using-custom-domain/) for more info.
	ClusterDomain string `protobuf:"bytes,2,opt,name=cluster_domain,json=clusterDomain,proto3" json:"cluster_domain,omitempty"`
}

func (x *MeshSpec_LinkerdMesh) Reset() {
	*x = MeshSpec_LinkerdMesh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshSpec_LinkerdMesh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshSpec_LinkerdMesh) ProtoMessage() {}

func (x *MeshSpec_LinkerdMesh) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshSpec_LinkerdMesh.ProtoReflect.Descriptor instead.
func (*MeshSpec_LinkerdMesh) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_rawDescGZIP(), []int{0, 2}
}

func (x *MeshSpec_LinkerdMesh) GetInstallation() *MeshInstallation {
	if x != nil {
		return x.Installation
	}
	return nil
}

func (x *MeshSpec_LinkerdMesh) GetClusterDomain() string {
	if x != nil {
		return x.ClusterDomain
	}
	return ""
}

// Describes a ConsulConnect deployment.
type MeshSpec_ConsulConnectMesh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes the ConsulConnect control plane deployment.
	Installation *MeshInstallation `protobuf:"bytes,1,opt,name=installation,proto3" json:"installation,omitempty"`
}

func (x *MeshSpec_ConsulConnectMesh) Reset() {
	*x = MeshSpec_ConsulConnectMesh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshSpec_ConsulConnectMesh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshSpec_ConsulConnectMesh) ProtoMessage() {}

func (x *MeshSpec_ConsulConnectMesh) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshSpec_ConsulConnectMesh.ProtoReflect.Descriptor instead.
func (*MeshSpec_ConsulConnectMesh) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_rawDescGZIP(), []int{0, 3}
}

func (x *MeshSpec_ConsulConnectMesh) GetInstallation() *MeshInstallation {
	if x != nil {
		return x.Installation
	}
	return nil
}

// Describes an [OSM](https://github.com/openservicemesh/osm) deployment.
type MeshSpec_OSM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes the OSM control plane deployment.
	Installation *MeshInstallation `protobuf:"bytes,1,opt,name=installation,proto3" json:"installation,omitempty"`
}

func (x *MeshSpec_OSM) Reset() {
	*x = MeshSpec_OSM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshSpec_OSM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshSpec_OSM) ProtoMessage() {}

func (x *MeshSpec_OSM) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshSpec_OSM.ProtoReflect.Descriptor instead.
func (*MeshSpec_OSM) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_rawDescGZIP(), []int{0, 4}
}

func (x *MeshSpec_OSM) GetInstallation() *MeshInstallation {
	if x != nil {
		return x.Installation
	}
	return nil
}

// Describes the Gloo Mesh agent which may be installed
// to the managed cluster containing the mesh control plane.
type MeshSpec_AgentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The namespace in which the Gloo Mesh agent is installed.
	AgentNamespace string `protobuf:"bytes,1,opt,name=agent_namespace,json=agentNamespace,proto3" json:"agent_namespace,omitempty"`
}

func (x *MeshSpec_AgentInfo) Reset() {
	*x = MeshSpec_AgentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshSpec_AgentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshSpec_AgentInfo) ProtoMessage() {}

func (x *MeshSpec_AgentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshSpec_AgentInfo.ProtoReflect.Descriptor instead.
func (*MeshSpec_AgentInfo) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_rawDescGZIP(), []int{0, 5}
}

func (x *MeshSpec_AgentInfo) GetAgentNamespace() string {
	if x != nil {
		return x.AgentNamespace
	}
	return ""
}

// DEPRECATED: external address data for an ingress gateway destination and workload live in the relevant Destination and Workload objects.
// Describes the ingress gateway.
type MeshSpec_Istio_IngressGatewayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: remove name and namespace as ingress gw info now contains a ref
	// The name of the Ingress Gateway Service
	Name string `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	// The namespace in which the ingress gateway is running.
	Namespace string `protobuf:"bytes,7,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The ingress service selector labels for the gateway.
	// [Defaults to](https://github.com/istio/istio/blob/ab6cc48134a698d7ad218a83390fe27e8098919f/pkg/config/constants/constants.go#L73) `{"istio": "ingressgateway"}`.
	WorkloadLabels map[string]string `protobuf:"bytes,1,rep,name=workload_labels,json=workloadLabels,proto3" json:"workload_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// DEPRECATED: in favor of dns_name or external_ip
	ExternalAddress string `protobuf:"bytes,2,opt,name=external_address,json=externalAddress,proto3" json:"external_address,omitempty"`
	// The externally-reachable address on which the gateway is listening for TLS connections.
	// This will be the address used for cross-cluster connectivity.
	// Defaults to the LoadBalancer Address (or NodeIP) of the Kubernetes service (depending on its type).
	//
	// Types that are assignable to ExternalAddressType:
	//	*MeshSpec_Istio_IngressGatewayInfo_DnsName
	//	*MeshSpec_Istio_IngressGatewayInfo_Ip
	ExternalAddressType isMeshSpec_Istio_IngressGatewayInfo_ExternalAddressType `protobuf_oneof:"external_address_type"`
	// The externally-reachable port on which the gateway is listening for TLS connections.
	// This will be the port used for cross-cluster connectivity.
	// See the list of [common ports used by Istio](https://istio.io/latest/docs/ops/deployment/requirements/#ports-used-by-istio).
	// Defaults to 15443 (or the NodePort) of the Kubernetes service (depending on its type).
	ExternalTlsPort uint32 `protobuf:"varint,3,opt,name=external_tls_port,json=externalTlsPort,proto3" json:"external_tls_port,omitempty"`
	// Container port on which the gateway is listening for TLS connections.
	// Defaults to 15443.
	TlsContainerPort uint32 `protobuf:"varint,4,opt,name=tls_container_port,json=tlsContainerPort,proto3" json:"tls_container_port,omitempty"`
}

func (x *MeshSpec_Istio_IngressGatewayInfo) Reset() {
	*x = MeshSpec_Istio_IngressGatewayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshSpec_Istio_IngressGatewayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshSpec_Istio_IngressGatewayInfo) ProtoMessage() {}

func (x *MeshSpec_Istio_IngressGatewayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshSpec_Istio_IngressGatewayInfo.ProtoReflect.Descriptor instead.
func (*MeshSpec_Istio_IngressGatewayInfo) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *MeshSpec_Istio_IngressGatewayInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MeshSpec_Istio_IngressGatewayInfo) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *MeshSpec_Istio_IngressGatewayInfo) GetWorkloadLabels() map[string]string {
	if x != nil {
		return x.WorkloadLabels
	}
	return nil
}

func (x *MeshSpec_Istio_IngressGatewayInfo) GetExternalAddress() string {
	if x != nil {
		return x.ExternalAddress
	}
	return ""
}

func (m *MeshSpec_Istio_IngressGatewayInfo) GetExternalAddressType() isMeshSpec_Istio_IngressGatewayInfo_ExternalAddressType {
	if m != nil {
		return m.ExternalAddressType
	}
	return nil
}

func (x *MeshSpec_Istio_IngressGatewayInfo) GetDnsName() string {
	if x, ok := x.GetExternalAddressType().(*MeshSpec_Istio_IngressGatewayInfo_DnsName); ok {
		return x.DnsName
	}
	return ""
}

func (x *MeshSpec_Istio_IngressGatewayInfo) GetIp() string {
	if x, ok := x.GetExternalAddressType().(*MeshSpec_Istio_IngressGatewayInfo_Ip); ok {
		return x.Ip
	}
	return ""
}

func (x *MeshSpec_Istio_IngressGatewayInfo) GetExternalTlsPort() uint32 {
	if x != nil {
		return x.ExternalTlsPort
	}
	return 0
}

func (x *MeshSpec_Istio_IngressGatewayInfo) GetTlsContainerPort() uint32 {
	if x != nil {
		return x.TlsContainerPort
	}
	return 0
}

type isMeshSpec_Istio_IngressGatewayInfo_ExternalAddressType interface {
	isMeshSpec_Istio_IngressGatewayInfo_ExternalAddressType()
}

type MeshSpec_Istio_IngressGatewayInfo_DnsName struct {
	// Will be populated if the LoadBalancer Address is a DNS name
	DnsName string `protobuf:"bytes,5,opt,name=dns_name,json=dnsName,proto3,oneof"`
}

type MeshSpec_Istio_IngressGatewayInfo_Ip struct {
	// Will be populated if the LoadBalancer Address is an IP
	Ip string `protobuf:"bytes,6,opt,name=ip,proto3,oneof"`
}

func (*MeshSpec_Istio_IngressGatewayInfo_DnsName) isMeshSpec_Istio_IngressGatewayInfo_ExternalAddressType() {
}

func (*MeshSpec_Istio_IngressGatewayInfo_Ip) isMeshSpec_Istio_IngressGatewayInfo_ExternalAddressType() {
}

type MeshStatus_AppliedIngressGateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Destination on the mesh that acts as an ingress gateway for the mesh.
	DestinationRef *v1.ObjectRef `protobuf:"bytes,1,opt,name=destination_ref,json=destinationRef,proto3" json:"destination_ref,omitempty"`
	// The externally accessible address(es) for this ingress gateway Destination.
	ExternalAddresses []string `protobuf:"bytes,2,rep,name=external_addresses,json=externalAddresses,proto3" json:"external_addresses,omitempty"`
	// The port on the ingress gateway Destination designated for receiving cross cluster traffic.
	DestinationPort uint32 `protobuf:"varint,3,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	// The port on the ingress gateway's backing Workload(s) designated for receiving cross cluster traffic.
	ContainerPort uint32 `protobuf:"varint,4,opt,name=container_port,json=containerPort,proto3" json:"container_port,omitempty"`
}

func (x *MeshStatus_AppliedIngressGateway) Reset() {
	*x = MeshStatus_AppliedIngressGateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshStatus_AppliedIngressGateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshStatus_AppliedIngressGateway) ProtoMessage() {}

func (x *MeshStatus_AppliedIngressGateway) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshStatus_AppliedIngressGateway.ProtoReflect.Descriptor instead.
func (*MeshStatus_AppliedIngressGateway) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_rawDescGZIP(), []int{2, 0}
}

func (x *MeshStatus_AppliedIngressGateway) GetDestinationRef() *v1.ObjectRef {
	if x != nil {
		return x.DestinationRef
	}
	return nil
}

func (x *MeshStatus_AppliedIngressGateway) GetExternalAddresses() []string {
	if x != nil {
		return x.ExternalAddresses
	}
	return nil
}

func (x *MeshStatus_AppliedIngressGateway) GetDestinationPort() uint32 {
	if x != nil {
		return x.DestinationPort
	}
	return 0
}

func (x *MeshStatus_AppliedIngressGateway) GetContainerPort() uint32 {
	if x != nil {
		return x.ContainerPort
	}
	return 0
}

// Describes a [VirtualMesh]({{< versioned_link_path fromRoot="/reference/api/github.com.solo-io.gloo-mesh.api.networking.v1.virtual_mesh" >}}) that applies to this Mesh.
// If an existing applied VirtualMesh becomes invalid, the last applied VirtualMesh will be used.
type MeshStatus_AppliedVirtualMesh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reference to the applied VirtualMesh object.
	Ref *v1.ObjectRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// The observed generation of the accepted VirtualMesh.
	ObservedGeneration int64 `protobuf:"varint,2,opt,name=observedGeneration,proto3" json:"observedGeneration,omitempty"`
	// The spec of the last known valid VirtualMesh.
	Spec *v11.VirtualMeshSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *MeshStatus_AppliedVirtualMesh) Reset() {
	*x = MeshStatus_AppliedVirtualMesh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshStatus_AppliedVirtualMesh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshStatus_AppliedVirtualMesh) ProtoMessage() {}

func (x *MeshStatus_AppliedVirtualMesh) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshStatus_AppliedVirtualMesh.ProtoReflect.Descriptor instead.
func (*MeshStatus_AppliedVirtualMesh) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_rawDescGZIP(), []int{2, 1}
}

func (x *MeshStatus_AppliedVirtualMesh) GetRef() *v1.ObjectRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *MeshStatus_AppliedVirtualMesh) GetObservedGeneration() int64 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

func (x *MeshStatus_AppliedVirtualMesh) GetSpec() *v11.VirtualMeshSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// Describes a [VirtualDestination]({{< versioned_link_path fromRoot="/reference/api/github.com.solo-io.gloo-mesh.api.enterprise.networking.v1alpha1.virtual_destination.md" >}}) that applies to this Mesh.
type MeshStatus_AppliedVirtualDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reference to the applied VirtualDestination object.
	Ref *v1.ObjectRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// The observed generation of the accepted VirtualDestination.
	ObservedGeneration int64 `protobuf:"varint,2,opt,name=observedGeneration,proto3" json:"observedGeneration,omitempty"`
	// Any errors encountered while processing the VirtualDestination.
	Errors []string `protobuf:"bytes,3,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *MeshStatus_AppliedVirtualDestination) Reset() {
	*x = MeshStatus_AppliedVirtualDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshStatus_AppliedVirtualDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshStatus_AppliedVirtualDestination) ProtoMessage() {}

func (x *MeshStatus_AppliedVirtualDestination) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshStatus_AppliedVirtualDestination.ProtoReflect.Descriptor instead.
func (*MeshStatus_AppliedVirtualDestination) Descriptor() ([]byte, []int) {
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_rawDescGZIP(), []int{2, 2}
}

func (x *MeshStatus_AppliedVirtualDestination) GetRef() *v1.ObjectRef {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *MeshStatus_AppliedVirtualDestination) GetObservedGeneration() int64 {
	if x != nil {
		return x.ObservedGeneration
	}
	return 0
}

func (x *MeshStatus_AppliedVirtualDestination) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

var File_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto protoreflect.FileDescriptor

var file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_rawDesc = []byte{
	0x0a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c,
	0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x1a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x73, 0x6b, 0x76, 0x32,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67, 0x6c, 0x6f, 0x6f,
	0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f, 0x67,
	0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x41, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f, 0x2f,
	0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12,
	0x65, 0x78, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb9, 0x0e, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x43, 0x0a, 0x05, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x73,
	0x68, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x69,
	0x73, 0x74, 0x69, 0x6f, 0x12, 0x54, 0x0a, 0x0c, 0x61, 0x77, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x5f,
	0x6d, 0x65, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x41, 0x77, 0x73, 0x41, 0x70, 0x70, 0x4d, 0x65, 0x73, 0x68, 0x48, 0x00, 0x52, 0x0a,
	0x61, 0x77, 0x73, 0x41, 0x70, 0x70, 0x4d, 0x65, 0x73, 0x68, 0x12, 0x4d, 0x0a, 0x07, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f,
	0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x68, 0x48, 0x00,
	0x52, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64, 0x12, 0x60, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x68, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x73, 0x68, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x3d, 0x0a, 0x03, 0x6f,
	0x73, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73,
	0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x70, 0x65, 0x63, 0x2e,
	0x4f, 0x53, 0x4d, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x73, 0x6d, 0x12, 0x4e, 0x0a, 0x0a, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x73,
	0x68, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xb1, 0x06, 0x0a, 0x05, 0x49,
	0x73, 0x74, 0x69, 0x6f, 0x12, 0x51, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73,
	0x74, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x73, 0x74, 0x69,
	0x6f, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x69, 0x0a, 0x10, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x73,
	0x6d, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x69, 0x6e,
	0x67, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x44, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0xd3, 0x03, 0x0a, 0x12, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x7b, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x49, 0x73, 0x74, 0x69, 0x6f, 0x2e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x08, 0x64, 0x6e, 0x73,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x64,
	0x6e, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x70, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x6c, 0x73, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x6c, 0x73,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x74, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f,
	0x72, 0x74, 0x1a, 0x41, 0x0a, 0x13, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x93,
	0x01, 0x0a, 0x0a, 0x41, 0x77, 0x73, 0x41, 0x70, 0x70, 0x4d, 0x65, 0x73, 0x68, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x77, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x77, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0e, 0x61, 0x77, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x77, 0x73, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x72, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x72, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x1a, 0x87, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x72, 0x64,
	0x4d, 0x65, 0x73, 0x68, 0x12, 0x51, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f,
	0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x1a, 0x66,
	0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d,
	0x65, 0x73, 0x68, 0x12, 0x51, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x58, 0x0a, 0x03, 0x4f, 0x53, 0x4d, 0x12, 0x51, 0x0a,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69,
	0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x34, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a,
	0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x97,
	0x02, 0x0a, 0x10, 0x4d, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x0a, 0x70,
	0x6f, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68,
	0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65,
	0x73, 0x68, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x6f, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70,
	0x6f, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x1a, 0x3c, 0x0a, 0x0e, 0x50, 0x6f,
	0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xef, 0x07, 0x0a, 0x0a, 0x4d, 0x65, 0x73,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c,
	0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x65,
	0x73, 0x68, 0x52, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x4d, 0x65, 0x73, 0x68, 0x12, 0x83, 0x01, 0x0a, 0x1c, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67,
	0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x1a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x89, 0x01, 0x0a,
	0x22, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x65, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e,
	0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x1e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x45, 0x61, 0x73, 0x74, 0x57, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x1a, 0xdf, 0x01, 0x0a, 0x15, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x12, 0x45, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x1a, 0xb7, 0x01, 0x0a, 0x12, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x65, 0x73,
	0x68, 0x12, 0x2e, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e,
	0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x03, 0x72, 0x65,
	0x66, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x41, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x1a, 0x93, 0x01, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x6b, 0x76, 0x32, 0x2e, 0x73, 0x6f, 0x6c, 0x6f,
	0x2e, 0x69, 0x6f, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x66, 0x52, 0x03, 0x72,
	0x65, 0x66, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x42, 0x49, 0x5a, 0x43, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x6c, 0x6f, 0x2d, 0x69, 0x6f,
	0x2f, 0x67, 0x6c, 0x6f, 0x6f, 0x2d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x6d, 0x65, 0x73,
	0x68, 0x2e, 0x67, 0x6c, 0x6f, 0x6f, 0x2e, 0x73, 0x6f, 0x6c, 0x6f, 0x2e, 0x69, 0x6f, 0x2f, 0x76,
	0x31, 0xc0, 0xf5, 0x04, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_rawDescOnce sync.Once
	file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_rawDescData = file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_rawDesc
)

func file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_rawDescGZIP() []byte {
	file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_rawDescOnce.Do(func() {
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_rawDescData)
	})
	return file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_rawDescData
}

var file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_goTypes = []interface{}{
	(*MeshSpec)(nil),                          // 0: discovery.mesh.gloo.solo.io.MeshSpec
	(*MeshInstallation)(nil),                  // 1: discovery.mesh.gloo.solo.io.MeshInstallation
	(*MeshStatus)(nil),                        // 2: discovery.mesh.gloo.solo.io.MeshStatus
	(*MeshSpec_Istio)(nil),                    // 3: discovery.mesh.gloo.solo.io.MeshSpec.Istio
	(*MeshSpec_AwsAppMesh)(nil),               // 4: discovery.mesh.gloo.solo.io.MeshSpec.AwsAppMesh
	(*MeshSpec_LinkerdMesh)(nil),              // 5: discovery.mesh.gloo.solo.io.MeshSpec.LinkerdMesh
	(*MeshSpec_ConsulConnectMesh)(nil),        // 6: discovery.mesh.gloo.solo.io.MeshSpec.ConsulConnectMesh
	(*MeshSpec_OSM)(nil),                      // 7: discovery.mesh.gloo.solo.io.MeshSpec.OSM
	(*MeshSpec_AgentInfo)(nil),                // 8: discovery.mesh.gloo.solo.io.MeshSpec.AgentInfo
	(*MeshSpec_Istio_IngressGatewayInfo)(nil), // 9: discovery.mesh.gloo.solo.io.MeshSpec.Istio.IngressGatewayInfo
	nil,                                      // 10: discovery.mesh.gloo.solo.io.MeshSpec.Istio.IngressGatewayInfo.WorkloadLabelsEntry
	nil,                                      // 11: discovery.mesh.gloo.solo.io.MeshInstallation.PodLabelsEntry
	(*MeshStatus_AppliedIngressGateway)(nil), // 12: discovery.mesh.gloo.solo.io.MeshStatus.AppliedIngressGateway
	(*MeshStatus_AppliedVirtualMesh)(nil),    // 13: discovery.mesh.gloo.solo.io.MeshStatus.AppliedVirtualMesh
	(*MeshStatus_AppliedVirtualDestination)(nil), // 14: discovery.mesh.gloo.solo.io.MeshStatus.AppliedVirtualDestination
	(*v1.ObjectRef)(nil),                         // 15: core.skv2.solo.io.ObjectRef
	(*v11.VirtualMeshSpec)(nil),                  // 16: networking.mesh.gloo.solo.io.VirtualMeshSpec
}
var file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_depIdxs = []int32{
	3,  // 0: discovery.mesh.gloo.solo.io.MeshSpec.istio:type_name -> discovery.mesh.gloo.solo.io.MeshSpec.Istio
	4,  // 1: discovery.mesh.gloo.solo.io.MeshSpec.aws_app_mesh:type_name -> discovery.mesh.gloo.solo.io.MeshSpec.AwsAppMesh
	5,  // 2: discovery.mesh.gloo.solo.io.MeshSpec.linkerd:type_name -> discovery.mesh.gloo.solo.io.MeshSpec.LinkerdMesh
	6,  // 3: discovery.mesh.gloo.solo.io.MeshSpec.consul_connect:type_name -> discovery.mesh.gloo.solo.io.MeshSpec.ConsulConnectMesh
	7,  // 4: discovery.mesh.gloo.solo.io.MeshSpec.osm:type_name -> discovery.mesh.gloo.solo.io.MeshSpec.OSM
	8,  // 5: discovery.mesh.gloo.solo.io.MeshSpec.agent_info:type_name -> discovery.mesh.gloo.solo.io.MeshSpec.AgentInfo
	11, // 6: discovery.mesh.gloo.solo.io.MeshInstallation.pod_labels:type_name -> discovery.mesh.gloo.solo.io.MeshInstallation.PodLabelsEntry
	13, // 7: discovery.mesh.gloo.solo.io.MeshStatus.applied_virtual_mesh:type_name -> discovery.mesh.gloo.solo.io.MeshStatus.AppliedVirtualMesh
	14, // 8: discovery.mesh.gloo.solo.io.MeshStatus.applied_virtual_destinations:type_name -> discovery.mesh.gloo.solo.io.MeshStatus.AppliedVirtualDestination
	12, // 9: discovery.mesh.gloo.solo.io.MeshStatus.applied_east_west_ingress_gateways:type_name -> discovery.mesh.gloo.solo.io.MeshStatus.AppliedIngressGateway
	1,  // 10: discovery.mesh.gloo.solo.io.MeshSpec.Istio.installation:type_name -> discovery.mesh.gloo.solo.io.MeshInstallation
	9,  // 11: discovery.mesh.gloo.solo.io.MeshSpec.Istio.ingress_gateways:type_name -> discovery.mesh.gloo.solo.io.MeshSpec.Istio.IngressGatewayInfo
	1,  // 12: discovery.mesh.gloo.solo.io.MeshSpec.LinkerdMesh.installation:type_name -> discovery.mesh.gloo.solo.io.MeshInstallation
	1,  // 13: discovery.mesh.gloo.solo.io.MeshSpec.ConsulConnectMesh.installation:type_name -> discovery.mesh.gloo.solo.io.MeshInstallation
	1,  // 14: discovery.mesh.gloo.solo.io.MeshSpec.OSM.installation:type_name -> discovery.mesh.gloo.solo.io.MeshInstallation
	10, // 15: discovery.mesh.gloo.solo.io.MeshSpec.Istio.IngressGatewayInfo.workload_labels:type_name -> discovery.mesh.gloo.solo.io.MeshSpec.Istio.IngressGatewayInfo.WorkloadLabelsEntry
	15, // 16: discovery.mesh.gloo.solo.io.MeshStatus.AppliedIngressGateway.destination_ref:type_name -> core.skv2.solo.io.ObjectRef
	15, // 17: discovery.mesh.gloo.solo.io.MeshStatus.AppliedVirtualMesh.ref:type_name -> core.skv2.solo.io.ObjectRef
	16, // 18: discovery.mesh.gloo.solo.io.MeshStatus.AppliedVirtualMesh.spec:type_name -> networking.mesh.gloo.solo.io.VirtualMeshSpec
	15, // 19: discovery.mesh.gloo.solo.io.MeshStatus.AppliedVirtualDestination.ref:type_name -> core.skv2.solo.io.ObjectRef
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_init() }
func file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_init() {
	if File_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto != nil {
		return
	}
	file_github_com_solo_io_gloo_mesh_api_discovery_v1_destination_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshInstallation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshSpec_Istio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshSpec_AwsAppMesh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshSpec_LinkerdMesh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshSpec_ConsulConnectMesh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshSpec_OSM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshSpec_AgentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshSpec_Istio_IngressGatewayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshStatus_AppliedIngressGateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshStatus_AppliedVirtualMesh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshStatus_AppliedVirtualDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*MeshSpec_Istio_)(nil),
		(*MeshSpec_AwsAppMesh_)(nil),
		(*MeshSpec_Linkerd)(nil),
		(*MeshSpec_ConsulConnect)(nil),
		(*MeshSpec_Osm)(nil),
	}
	file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*MeshSpec_Istio_IngressGatewayInfo_DnsName)(nil),
		(*MeshSpec_Istio_IngressGatewayInfo_Ip)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_goTypes,
		DependencyIndexes: file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_depIdxs,
		MessageInfos:      file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_msgTypes,
	}.Build()
	File_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto = out.File
	file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_rawDesc = nil
	file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_goTypes = nil
	file_github_com_solo_io_gloo_mesh_api_discovery_v1_mesh_proto_depIdxs = nil
}

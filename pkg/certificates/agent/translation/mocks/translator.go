// Code generated by MockGen. DO NOT EDIT.
// Source: ./cert_agent_translator.go

// Package mock_translation is a generated GoMock package.
package mock_translation

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	input "github.com/solo-io/gloo-mesh/pkg/api/certificates.mesh.gloo.solo.io/agent/input"
	certagent "github.com/solo-io/gloo-mesh/pkg/api/certificates.mesh.gloo.solo.io/agent/output/certagent"
	v1 "github.com/solo-io/gloo-mesh/pkg/api/certificates.mesh.gloo.solo.io/v1"
)

// MockTranslator is a mock of Translator interface.
type MockTranslator struct {
	ctrl     *gomock.Controller
	recorder *MockTranslatorMockRecorder
}

// MockTranslatorMockRecorder is the mock recorder for MockTranslator.
type MockTranslatorMockRecorder struct {
	mock *MockTranslator
}

// NewMockTranslator creates a new mock instance.
func NewMockTranslator(ctrl *gomock.Controller) *MockTranslator {
	mock := &MockTranslator{ctrl: ctrl}
	mock.recorder = &MockTranslatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTranslator) EXPECT() *MockTranslatorMockRecorder {
	return m.recorder
}

// IssuedCertificateFinished mocks base method.
func (m *MockTranslator) IssuedCertificateFinished(ctx context.Context, issuedCertificate *v1.IssuedCertificate, inputs input.Snapshot, outputs certagent.Builder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssuedCertificateFinished", ctx, issuedCertificate, inputs, outputs)
	ret0, _ := ret[0].(error)
	return ret0
}

// IssuedCertificateFinished indicates an expected call of IssuedCertificateFinished.
func (mr *MockTranslatorMockRecorder) IssuedCertificateFinished(ctx, issuedCertificate, inputs, outputs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssuedCertificateFinished", reflect.TypeOf((*MockTranslator)(nil).IssuedCertificateFinished), ctx, issuedCertificate, inputs, outputs)
}

// IssuedCertificateIssued mocks base method.
func (m *MockTranslator) IssuedCertificateIssued(ctx context.Context, issuedCertificate *v1.IssuedCertificate, inputs input.Snapshot, outputs certagent.Builder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssuedCertificateIssued", ctx, issuedCertificate, inputs, outputs)
	ret0, _ := ret[0].(error)
	return ret0
}

// IssuedCertificateIssued indicates an expected call of IssuedCertificateIssued.
func (mr *MockTranslatorMockRecorder) IssuedCertificateIssued(ctx, issuedCertificate, inputs, outputs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssuedCertificateIssued", reflect.TypeOf((*MockTranslator)(nil).IssuedCertificateIssued), ctx, issuedCertificate, inputs, outputs)
}

// IssuedCertificateRequested mocks base method.
func (m *MockTranslator) IssuedCertificateRequested(ctx context.Context, issuedCertificate *v1.IssuedCertificate, certificateRequest *v1.CertificateRequest, inputs input.Snapshot, outputs certagent.Builder) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssuedCertificateRequested", ctx, issuedCertificate, certificateRequest, inputs, outputs)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssuedCertificateRequested indicates an expected call of IssuedCertificateRequested.
func (mr *MockTranslatorMockRecorder) IssuedCertificateRequested(ctx, issuedCertificate, certificateRequest, inputs, outputs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssuedCertificateRequested", reflect.TypeOf((*MockTranslator)(nil).IssuedCertificateRequested), ctx, issuedCertificate, certificateRequest, inputs, outputs)
}

// IssuedCertiticatePending mocks base method.
func (m *MockTranslator) IssuedCertiticatePending(ctx context.Context, issuedCertificate *v1.IssuedCertificate, inputs input.Snapshot, outputs certagent.Builder) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssuedCertiticatePending", ctx, issuedCertificate, inputs, outputs)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssuedCertiticatePending indicates an expected call of IssuedCertiticatePending.
func (mr *MockTranslatorMockRecorder) IssuedCertiticatePending(ctx, issuedCertificate, inputs, outputs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssuedCertiticatePending", reflect.TypeOf((*MockTranslator)(nil).IssuedCertiticatePending), ctx, issuedCertificate, inputs, outputs)
}

// ShouldProcess mocks base method.
func (m *MockTranslator) ShouldProcess(ctx context.Context, issuedCertificate *v1.IssuedCertificate) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldProcess", ctx, issuedCertificate)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldProcess indicates an expected call of ShouldProcess.
func (mr *MockTranslatorMockRecorder) ShouldProcess(ctx, issuedCertificate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldProcess", reflect.TypeOf((*MockTranslator)(nil).ShouldProcess), ctx, issuedCertificate)
}

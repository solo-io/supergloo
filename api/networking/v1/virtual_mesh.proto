syntax = "proto3";
package networking.mesh.gloo.solo.io;
option go_package = "github.com/solo-io/gloo-mesh/pkg/api/networking.mesh.gloo.solo.io/v1";

import "github.com/solo-io/skv2/api/core/v1/core.proto";
import "github.com/solo-io/gloo-mesh/api/common/v1/selectors.proto";
import "github.com/solo-io/gloo-mesh/api/common/v1/keepalive.proto";
import "github.com/solo-io/gloo-mesh/api/networking/v1/status.proto";
import "github.com/solo-io/gloo-mesh/api/common/v1/validation_state.proto";
import "github.com/solo-io/gloo-mesh/api/certificates/v1/ca_options.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;

// Represents a logical grouping of Meshes for shared configuration and cross-mesh interoperability.
message VirtualMeshSpec {

    // Specify the Meshes configured by this VirtualMesh.
    repeated .core.skv2.solo.io.ObjectRef meshes = 1;

    // Specify mTLS options.
    MTLSConfig mtls_config = 2;

    // Specify how to federate Destinations across service mesh boundaries.
    Federation federation = 3;

    // Specify a global access policy for all Workloads and Destinations associated with this VirtualMesh.
    GlobalAccessPolicy global_access_policy = 4;

    // Specify mTLS options.
    // This includes options for configuring Mutual TLS within an individual Mesh, as
    // well as enabling mTLS across Meshes by establishing cross-mesh trust.
    message MTLSConfig {

        // Specify the model for establishing mTLS trust between Meshes.
        oneof trust_model {

            // Shared trust (allow communication between any pair of Workloads and Destinations in the grouped Meshes).
            SharedTrust shared = 1;

            // Limited trust (selectively allow communication between Workloads and Destinations in the grouped Meshes). *Currently not available.*
            LimitedTrust limited = 2;
        }

        // Specify whether to allow Gloo Mesh to restart Kubernetes Pods when certificates are rotated when establishing shared trust.
        // If this option is not explicitly enabled,
        // users must restart Pods manually for the new certificates to be picked up.
        // `meshctl` provides the command `meshctl mesh restart` to simplify this process, see [here]({{< versioned_link_path fromRoot="reference/cli/meshctl_mesh_restart/" >}}) for more info.
        bool auto_restart_pods = 3;

        // Type of rotation verification to use when rotating root certificates.
        .certificates.mesh.gloo.solo.io.CertificateRotationVerificationMethod rotation_verification_method = 4;

        // Type of rotation to use.
        .certificates.mesh.gloo.solo.io.CertificateRotationStrategy rotation_strategy= 5;

        // Limited trust is a trust model which does not require trusting Meshes to share the same root certificate
        // or identity. Instead, trust is established between different Meshes
        // by connecting their ingress/egress gateways with a common certificate/identity. In this model all requests
        // between different have the following request path when communicating between clusters
        // ```
        //                cluster 1 MTLS               shared MTLS                  cluster 2 MTLS
        // client/workload <-----------> egress gateway <----------> ingress gateway <--------------> server
        // ```
        // This approach has the downside of not maintaining identity from client to server, but allows for ad-hoc
        // addition of additional Meshes into a VirtualMesh.
        message LimitedTrust {
        }

    }
    // "Federation" refers to the ability to expose Destinations across service mesh boundaries, i.e. to traffic
    // originating from Workloads external to the Destination's Mesh.
    message Federation {

        // Selects the Destination(s) acting as ingress gateways for cross cluster traffic.
        // The supplied IngressGatewaySelectors will be used to select ingress gateways for all Meshes in this VirtualMesh.
        repeated .common.mesh.gloo.solo.io.IngressGatewaySelector east_west_ingress_gateway_selectors = 6;

        // Selectively federate Destinations to specific external meshes.
        // If omitted, no Destinations will be federated.
        repeated FederationSelector selectors = 4;

        // DEPRECATED: Use `selectors` instead. Omission of the `selectors` field has permissive semantics.
        // The "mode" in which to federate Destinations within this VirtualMesh.
        oneof mode {

            // DEPRECATED: Use `selectors` with an empty selector (i.e. `{}`) for permissive semantics.
            // Expose all Destinations to all Workloads in this VirtualMesh.
            .google.protobuf.Empty permissive = 1;
        };

        // If true, all multicluster traffic will be routed directly to the Kubernetes service endpoints of the Destinations,
        // rather than through an ingress gateway. This mode requires a flat network environment.
        // This feature is exclusive to Gloo Mesh Enterprise.
        bool flat_network = 2;

        // Configure the suffix for hostnames of Destinations federated within this VirtualMesh.
        // Currently this is only supported for Istio with [smart DNS proxying enabled](https://istio.io/latest/blog/2020/dns-proxy/),
        // otherwise setting this field results in an error.
        // If omitted, the hostname suffix defaults to "global".
        string hostname_suffix = 3;

        // Specify a keepalive rule for all requests made within the VirtualMesh which cross clusters within that VirtualMesh,
        // as well as any requests to externalService type destinations.
        .common.mesh.gloo.solo.io.TCPKeepalive tcp_keepalive = 5;

        // Selects a set of Destinations to federate to the referenced Meshes.
        message FederationSelector {

            // The set of Destinations that will be federated to external Meshes.
            // If omitted, all Destinations will be selected.
            repeated .common.mesh.gloo.solo.io.DestinationSelector destination_selectors = 1;

            // The Meshes to which the selected Destinations will be federated. All referenced Meshes must exist in this VirtualMesh.
            // If omitted, the selected Destinations will be federated to all Meshes in the VirtualMesh.
            repeated .core.skv2.solo.io.ObjectRef meshes = 2;
        }
    }

    // Specify a global access policy for all Workloads and Destinations associated with this VirtualMesh.
    enum GlobalAccessPolicy {

        // Assume the default for the service mesh type. Istio defaults to `false`, App Mesh defaults to `true`.
        MESH_DEFAULT = 0;

        // Disallow traffic to all Destinations in the VirtualMesh unless explicitly allowed through [AccessPolicies]({{< versioned_link_path fromRoot="/reference/api/github.com.solo-io.gloo-mesh.api.networking.v1.access_policy/" >}}).
        ENABLED = 1;

        // Allow traffic to all Destinations in the VirtualMesh unless explicitly disallowed through [AccessPolicies]({{< versioned_link_path fromRoot="/reference/api/github.com.solo-io.gloo-mesh.api.networking.v1.access_policy/" >}}).
        DISABLED = 2;
    }

}

// Specify parameters for configuring the root certificate authority for a VirtualMesh.
message RootCertificateAuthority {

    // Specify the source of the Root CA data which Gloo Mesh will use for the VirtualMesh.
    oneof ca_source {

        // Generate a self-signed root certificate with the given options.
        .certificates.mesh.gloo.solo.io.CommonCertOptions generated = 1;

        // Reference to a Kubernetes Secret containing the root certificate authority.
        // Provided secrets must conform to a specified format, [documented here]({{< versioned_link_path fromRoot="/guides/federate_identity/" >}}).
        .core.skv2.solo.io.ObjectRef secret = 2;

    }    
}

// Shared trust is a trust model requiring a common root certificate shared between trusting Meshes, as well as shared identity
// between all Workloads and Destinations which wish to communicate within the VirtualMesh.
message SharedTrust {

    oneof certificate_authority {

        // Configure a Root Certificate Authority which will be shared by all Meshes associated with this VirtualMesh.
        // If this is not provided, a self-signed certificate will be generated by Gloo Mesh.        
        RootCertificateAuthority root_certificate_authority = 1;

        // Configures an Intermediate Certificiate Authority which remote clusters will use to generate intermediate 
        // certificates. In order for this to properly mesh all of the traffic across the different meshes, the CA 
        // being used must be configured to generate the intermediate certificates.
        .certificates.mesh.gloo.solo.io.IntermediateCertificateAuthority intermediate_certificate_authority = 2;   
    }

    // Configuration options for generated intermediate certs.
    .certificates.mesh.gloo.solo.io.CommonCertOptions intermediate_cert_options = 3; 

}

message VirtualMeshStatus {

    // The most recent generation observed in the the VirtualMesh metadata.
    // If the `observedGeneration` does not match `metadata.generation`, Gloo Mesh has not processed the most
    // recent version of this resource.
    int64 observed_generation = 1;

    // The state of the overall resource. It will only show accepted if it has been successfully
    // applied to all selected Meshes.
    .common.mesh.gloo.solo.io.ApprovalState state = 2;

    // Any errors found while processing this generation of the resource.
    repeated string errors = 3;

    // The status of the VirtualMesh for each Mesh to which it has been applied.
    // A VirtualMesh may be Accepted for some Meshes and rejected for others.
    map<string, ApprovalStatus> meshes = 4;

    // The status of the VirtualMesh for each Destination to which it has been applied.
    // A VirtualMesh may be Accepted for some Destinations and rejected for others.
    map<string, ApprovalStatus> destinations = 5;

    // List of rotation conditions which have been completed/carried out for this Virtual Mesh
    repeated .certificates.mesh.gloo.solo.io.CertificateRotationCondition conditions = 6;
}

syntax = "proto3";
package discovery.mesh.gloo.solo.io;
option go_package = "github.com/solo-io/gloo-mesh/pkg/api/discovery.mesh.gloo.solo.io/v1";

import "github.com/solo-io/skv2/api/core/v1/core.proto";
import "github.com/solo-io/gloo-mesh/api/networking/v1/virtual_mesh.proto";
import "github.com/solo-io/gloo-mesh/api/discovery/v1/destination.proto";
import "github.com/solo-io/gloo-mesh/api/certificates/v1/ca_options.proto";
import "google/protobuf/wrappers.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;

// Describes a service mesh control plane deployment.
message MeshSpec {

    // Describes platform specific properties of the service mesh.
    oneof type {

        // Describes an [Istio](https://istio.io/) service mesh.
        Istio istio = 1;

        // Describes an [AWS App Mesh](https://aws.amazon.com/app-mesh/) service mesh.
        AwsAppMesh aws_app_mesh = 2;

        // Describes a [Linkerd](https://linkerd.io/) service mesh.
        LinkerdMesh linkerd = 3;

        // Describes a [Consul Connect](https://www.consul.io/docs/connect) service mesh.
        ConsulConnectMesh consul_connect = 4;

        // Describes an [Open Service Mesh](https://openservicemesh.io/) service mesh.
        OSM osm = 6;
    }

    // Describes the Gloo Mesh agent if it has been installed to the managed cluster.
    AgentInfo agent_info = 5;

    // Describes an Istio deployment.
    message Istio {

        // Describes the Istio control plane deployment.
        MeshInstallation installation = 1;

        // The Istio trust domain used for https/[spiffe](https://spiffe.io/spiffe/concepts/#trust-domain) [identity](https://istio.io/docs/reference/glossary/#identity).
        // If empty will default to ["cluster.local"](https://github.com/istio/istio/blob/e768f408a7de224e64ccdfb2634442541ce08e6a/pilot/cmd/pilot-agent/main.go#L118).
        string trust_domain = 2;

        // The istiod service account which determines identity for the Istio CA cert.
        string istiod_service_account = 3;

        // DEPRECATED: external address data for an ingress gateway destination and workload live in the relevant Destination and Workload objects.
        // Describes the ingress gateway.
        repeated IngressGatewayInfo ingress_gateways = 4;

        // True if smart DNS proxying is enabled, which allows for arbitrary DNS domains.
        bool smart_dns_proxying_enabled = 5;

        // DEPRECATED: external address data for an ingress gateway destination and workload live in the relevant Destination and Workload objects.
        // Describes the ingress gateway.
        message IngressGatewayInfo {
            // TODO: remove name and namespace as ingress gw info now contains a ref
            // The name of the Ingress Gateway Service
            string name = 8;

            // The namespace in which the ingress gateway is running.
            string namespace = 7;

            // The ingress service selector labels for the gateway.
            // [Defaults to](https://github.com/istio/istio/blob/ab6cc48134a698d7ad218a83390fe27e8098919f/pkg/config/constants/constants.go#L73) `{"istio": "ingressgateway"}`.
            map<string, string> workload_labels = 1;

            // DEPRECATED: in favor of dns_name or external_ip
            string external_address = 2;

            // The externally-reachable address on which the gateway is listening for TLS connections.
            // This will be the address used for cross-cluster connectivity.
            // Defaults to the LoadBalancer Address (or NodeIP) of the Kubernetes service (depending on its type).
            oneof external_address_type {
                // Will be populated if the LoadBalancer Address is a DNS name
                string dns_name = 5;

                // Will be populated if the LoadBalancer Address is an IP
                string ip = 6;
            }

            // The externally-reachable port on which the gateway is listening for TLS connections.
            // This will be the port used for cross-cluster connectivity.
            // See the list of [common ports used by Istio](https://istio.io/latest/docs/ops/deployment/requirements/#ports-used-by-istio).
            // Defaults to 15443 (or the NodePort) of the Kubernetes service (depending on its type).
            uint32 external_tls_port = 3;

            // Container port on which the gateway is listening for TLS connections.
            // Defaults to 15443.
            uint32 tls_container_port = 4;
        }
    }

    // Describes an AWS App Mesh instance.
    message AwsAppMesh {

        // The AWS name for the App Mesh instance, must be unique across all AppMesh instances owned by the AWS account.
        string aws_name = 1;

        // The AWS region the App Mesh control plane resources exist in.
        string region = 2;

        // The AWS Account ID associated with the Mesh. Populated at REST API registration time.
        string aws_account_id = 3;

        // The unique AWS ARN associated with the App Mesh instance.
        string arn = 4;

        // The Kubernetes clusters on which sidecars for this App Mesh instance have been discovered.
        repeated string clusters = 5;
    }

    // Describes a Linkerd deployment.
    message LinkerdMesh {

        // Describes the Linkerd control plane deployment.
        MeshInstallation installation = 1;

        // The cluster domain suffix this Linkerd mesh is configured with. See [this reference](https://linkerd.io/2/tasks/using-custom-domain/) for more info.
        string cluster_domain = 2;
    }

    // Describes a ConsulConnect deployment.
    message ConsulConnectMesh {

        // Describes the ConsulConnect control plane deployment.
        MeshInstallation installation = 1;
    }

    // Describes an [OSM](https://github.com/openservicemesh/osm) deployment.
    message OSM {

        // Describes the OSM control plane deployment.
        MeshInstallation installation = 1;
    }

    // Describes the Gloo Mesh agent which may be installed
    // to the managed cluster containing the mesh control plane.
    message AgentInfo {

        // The namespace in which the Gloo Mesh agent is installed.
        string agent_namespace = 1;
    }

}

/*
    Describes the Kubernetes cluster on which the control plane for this mesh is deployed.
    Only self-hosted control planes such as Istio, Linkerd, OSM, and ConsulConnect will have installation metadata.
*/
message MeshInstallation {

    // Namespace in which the control plane has been installed.
    string namespace = 1;

    // The Gloo Mesh cluster in which the control plane has been installed.
    string cluster = 2;

    // The labels on the control plane pods (read from the deployment).
    map<string, string> pod_labels = 3;

    // The version of the Mesh that has been installed, which is determined using the image tag on the
    // mesh's primary control plane image (e.g. the istio-pilot image tag).
    string version = 4;

    // The region of the cluster in which the control plane has been installed, which is
    // determined from the value of the [Kubernetes region topology label](https://kubernetes.io/docs/reference/labels-annotations-taints/#topologykubernetesioregion)
    // on any Kubernetes node associated with the cluster of this mesh.
    string region = 5;
}

message MeshStatus {

    // The observed generation of the Mesh.
    // When this matches the Mesh's metadata.generation, it indicates that Gloo Mesh
    // has processed the latest version of the Mesh.
    int64 observed_generation = 1;

    // The VirtualMesh, if any, which contains this Mesh.
    AppliedVirtualMesh applied_virtual_mesh = 2;

    // The VirtualDestinations, if any, which apply to this Mesh.
    repeated AppliedVirtualDestination applied_virtual_destinations = 3;

    // The Destination(s) acting as ingress gateways for east west traffic.
    repeated AppliedIngressGateway applied_east_west_ingress_gateways = 4;

    message AppliedIngressGateway {
        // The Destination on the mesh that acts as an ingress gateway for the mesh.
        .core.skv2.solo.io.ObjectRef destination_ref = 1;

        // The externally accessible address(es) for this ingress gateway Destination.
        repeated string external_addresses = 2;

        // The port on the ingress gateway Destination designated for receiving cross cluster traffic.
        uint32 destination_port = 3;

        // The port on the ingress gateway's backing Workload(s) designated for receiving cross cluster traffic.
        uint32 container_port = 4;
    }

    // Describes a [VirtualMesh]({{< versioned_link_path fromRoot="/reference/api/github.com.solo-io.gloo-mesh.api.networking.v1.virtual_mesh" >}}) that applies to this Mesh.
    // If an existing applied VirtualMesh becomes invalid, the last applied VirtualMesh will be used.
    message AppliedVirtualMesh {

        // Reference to the applied VirtualMesh object.
        .core.skv2.solo.io.ObjectRef ref = 1;

        // The observed generation of the accepted VirtualMesh.
        int64 observedGeneration = 2;

        // The spec of the last known valid VirtualMesh.
        .networking.mesh.gloo.solo.io.VirtualMeshSpec spec = 3;
    }

    // Describes a [VirtualDestination]({{< versioned_link_path fromRoot="/reference/api/github.com.solo-io.gloo-mesh.api.enterprise.networking.v1alpha1.virtual_destination.md" >}}) that applies to this Mesh.
    message AppliedVirtualDestination {

        // Reference to the applied VirtualDestination object.
        .core.skv2.solo.io.ObjectRef ref = 1;

        // The observed generation of the accepted VirtualDestination.
        int64 observedGeneration = 2;

        // Any errors encountered while processing the VirtualDestination.
        repeated string errors = 3;
    }
}

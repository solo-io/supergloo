syntax = "proto3";
package networking.enterprise.mesh.gloo.solo.io;

option go_package = "github.com/solo-io/gloo-mesh/pkg/api/networking.enterprise.mesh.gloo.solo.io/v1beta1";

import "github.com/solo-io/skv2/api/core/v1/core.proto";
import "github.com/solo-io/gloo-mesh/api/common/v1/selectors.proto";
import "github.com/solo-io/gloo-mesh/api/enterprise/networking/v1beta1/virtual_host.proto";

import "github.com/solo-io/gloo-mesh/api/networking/v1/csrf/csrf.proto";
import "github.com/solo-io/gloo-mesh/api/networking/v1/ratelimit/rate_limit.proto";
import "github.com/solo-io/gloo-mesh/api/networking/v1/extauth/extauth.proto";
import "github.com/solo-io/gloo-mesh/api/networking/v1/transformation/transformation.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/duration.proto";

import "encoding/protobuf/cue/cue.proto";

import "extproto/ext.proto";
option (extproto.equal_all) = true;

/*
    VirtualGateway is the top-level object for configuring ingress into a Mesh or VirtualMesh.
    A single VirtualGateway can apply to multiple deployed ingress pods and sidecars across meshes and clusters contained within a VirtualMesh.
    VirtualGateways can route traffic to destination services which live in a specific cluster or mesh.
    This allows VirtualGateways to route traffic from an ingress or sidecar in one mesh to a service in another. In order to
    perform cross-mesh routing, the Gateway Mesh and Destination mesh must be contained in a single VirtualMesh, with federation enabled.
*/
message VirtualGatewaySpec {

    // deploy this VirtualGateway to one or more Ingress Gateway workloads
    // {{/* TODO: evaluate supporting multiple ingress gateway deployments per VG */}}
    DeployToIngressGateway deploy_to_ingress_gateways = 1;

    // deploy this VirtualGateway to one or more workload sidecars
    // {{/* NOTE: unimplemented */}}
    repeated .common.mesh.gloo.solo.io.WorkloadSelector deploy_to_sidecars = 2;

    // Each Gateway must implement one or more ConnectionHandlers.
    // A ConnectionHandler instructs the gateway how to handle clients
    // which have connected to the specified bind address.
    // Typically `connectionHandlers` will consist of a single `http` handler
    // which serves HTTP Routes defined in a set of VirtualHosts.
    // Multiple `connectionHandlers` can be specified to provide different behavior
    // on the same Gateway, e.g. one for TCP and one for HTTP traffic.
    repeated ConnectionHandler connection_handlers = 3;

    // Options applied to all clients who connect to this gateway
    GatewayOptions options = 4;

    // Options for deploying the VirtualGateway to an Istio Ingress Gateway
    message DeployToIngressGateway {

        // The bind address the gateway should serve traffic on
        // This maps to the Envoy Listener address.
        // Defaults to "::" or "0.0.0.0".
        string bind_address = 1;

        // The bind port where the gateway workload will listen for connections.
        // This maps to the Envoy Listener port.
        uint32 bind_port = 2;

        // Select which gateway workloads (Envoy pods / Istio ingress-gateways) this config applies to.
        // Ingress pods selected must be in the same Mesh (or Federated VirtualMesh) as the Destination services
        // being routed to.
        repeated .common.mesh.gloo.solo.io.WorkloadSelector gateway_workloads = 3;

    }

    // Each ConnnectionHandler specifies a `connectionMatch` (required if using multiple ConnectionHandlers) and
    // a set of (HTTP or TCP) routes to serve matched connections.
    message ConnectionHandler {
        // Additional options for matching a connection to a specific gateway.
        // This is required when more than one `connectionHandler` is specified for a single gateway.
        // Typically this is used to serve different
        ConnectionMatch connection_match = 1;

        // The type of routes this handler will serve.
        // HttpRoutes creates a listener with an http_connection_manager.
        // TcpRoutes creates a listener with a tcp proxy filter.
        oneof handler_type {
            HttpRoutes http = 2;
            TcpRoutes tcp = 3;
        }

        // Top level optional configuration for all routes on the ConnectionHandler.
        ConnectionOptions connection_options = 4;

        message ConnectionMatch {
            // Look at what Envoy exposes, put them all(maybe?) here
            // Should expose everything we can do with Envoy, ideally.

            // Protocol
            string transport_protocol = 1;

            // If non-empty, a list of server names (e.g. SNI for TLS protocol) to consider when determining
            // a `connectionMatch`. Those values will be compared against the server names of a new
            // connection, when detected by one of the listener filters.
            //
            // The server name will be matched against all wildcard domains, i.e. `www.example.com`
            // will be first matched against `www.example.com`, then `*.example.com`, then ``*.com`.
            //
            // Note that partial wildcards are not supported, and values like `*w.example.com` are invalid.
            repeated string server_names = 2;

            // TODO (add more fields from Envoy here)

        }

        // TODO: Fill ConnectionOptions
        message ConnectionOptions {
            // TODO
            TlsTerminationOptions tls_context = 1;

            // Restricts filter from being added to the corresponding Envoy Listener unless they are explicitly configured
            // in the connection handler options
            bool strict_filter_management = 2;

            // enable PROXY protocol for this connection handler.
            bool enable_proxy_protocol = 3;

            message TlsTerminationOptions {
                // If specified, the route will match against whether or not a certificate is presented.
                // If not specified, certificate presentation status (true or false) will not be considered when route matching.
                google.protobuf.BoolValue presented = 1;

                // If specified, the route will match against whether or not a certificate is validated.
                // If not specified, certificate validation status (true or false) will not be considered when route matching.
                google.protobuf.BoolValue validated = 2;
            }
        }

        message HttpRoutes {

            repeated RouteSpecifier route_config = 1;

            // HTTP Listener Options // Root level RouteTable + VirtualHost + routes level
            HttpOptions route_options = 8;

            message RouteSpecifier {
                oneof route_type{
                    // RouteSelector is used to specify which VirtualHosts should be attached to this gateway.
                    .core.skv2.solo.io.ObjectSelector virtual_host_selector = 1;

                    // VirtualHost allows in-lining a route table directly in the Gateway Resource, for simple configs using fewer CRDs.
                    // Note that Kubernetes admission validation of inline virtual hosts is disabled. For production, the use of `virtualHostSelector` is recommended.
                    VirtualHostSpec virtual_host = 2 [(cue.opt).disable_openapi_validation = true];
                }

            }

            message HttpOptions {

                // TODO: Fill with HttpListenerOptions from gloo options.proto
                // Team discussion topic

                // TODO: Move HTTP-specific Gateway Options to here

                // ExtAuth, Rate-Limiting, etc.

                // grpc_web.options.gloo.solo.io.GrpcWeb grpc_web = 1;
                // hcm.options.gloo.solo.io.HttpConnectionManagerSettings http_connection_manager_settings = 2;
                // enable [Envoy health checks](https://www.envoyproxy.io/docs/envoy/v1.7.0/api-v2/config/filter/http/health_check/v2/health_check.proto) on this listener
                // healthcheck.options.gloo.solo.io.HealthCheck health_check = 4;

                // Configure Global CSRF options for clients connected to this Gateway.
                .csrf.networking.mesh.gloo.solo.io.CsrfPolicy csrf = 2;

                // Configure Global Rate limit options for clients connected to this Gateway.
                // Rate limits must be configured on specific routes in order to enable rate limiting for a Gateway.
                .ratelimit.networking.mesh.gloo.solo.io.GatewayRateLimit rate_limit = 3;

                // Configure the Global Extauth options for clients connected to this Gateway
                .extauth.networking.mesh.gloo.solo.io.GatewayExtauth extauth = 4;

            }
        }

        message TcpRoutes {
            // TCP hosts that the gateway can route to
            repeated TcpHost tcp_hosts = 1;

            // TCP Gateway configuration
            TcpOptions options = 2;

            message TcpHost {
                // the logical name of the tcp host. names must be unique for each tcp host within a listener
                string name = 1;

                // If provided, the Gateway will serve TLS/SSL traffic for this set of routes
                SslConfig ssl_config = 2;

                TcpAction destination = 3;

                // SslConfig contains the options necessary to configure a virtual host or listener to use TLS
                message SslConfig {
                    oneof ssl_secrets {
                        // SecretRef contains the secret ref to a gloo tls secret or a kubernetes tls secret.
                        // gloo tls secret can contain a root ca as well if verification is needed.
                        .core.skv2.solo.io.ObjectRef secret_ref = 1;
                        // SSLFiles reference paths to certificates which are local to the proxy
                        SSLFiles ssl_files = 2;
                        // Use secret discovery service.
                        SDSConfig sds = 3;

                        // SSLFiles reference paths to certificates which can be read by the proxy off of its local filesystem
                    }



                    // optional. the SNI domains that should be considered for TLS connections
                    repeated string sni_domains = 4;
                    
                    // Verify that the Subject Alternative Name in the peer certificate is one of the specified values.
                    // note that a root_ca must be provided if this option is used.
                    repeated string verify_subject_alt_name = 5;

                    SslParameters parameters = 6;

                    // Set Application Level Protocol Negotiation
                    // If empty, defaults to ["h2", "http/1.1"].
                    repeated string alpn_protocols = 7;

                    message SSLFiles {
                        string tls_cert = 1;
                        string tls_key = 2;
                        // for client cert validation. optional
                        string root_ca = 3;
                    }

                    // General TLS parameters. See the [envoy docs](https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/auth/cert.proto#envoy-api-enum-auth-tlsparameters-tlsprotocol)
                    // for more information on the meaning of these values.
                    message SslParameters {
                        enum ProtocolVersion {
                            // Envoy will choose the optimal TLS version.
                            TLS_AUTO = 0;

                            // TLS 1.0
                            TLSv1_0 = 1;

                            // TLS 1.1
                            TLSv1_1 = 2;

                            // TLS 1.2
                            TLSv1_2 = 3;

                            // TLS 1.3
                            TLSv1_3 = 4;
                        }


                        ProtocolVersion minimum_protocol_version = 1;
                        ProtocolVersion maximum_protocol_version = 2;
                        repeated string cipher_suites = 3;
                        repeated string ecdh_curves = 4;
                    }
                }

                // Name of the destinations the gateway can route to.
                // Note: the destination spec and subsets are not supported in this context and will be ignored.
                message TcpAction {

                    oneof destination {

                        // Reference to a gloo mesh Static Destination
                        .core.skv2.solo.io.ObjectRef static  = 1;

                        // Reference to a gloo mesh VirtualDestination
                        .core.skv2.solo.io.ObjectRef virtual  = 2;

                        // Reference to a Kubernetes Service. Note that the service must exist in the same mesh or virtual mesh (with federation enabled) as
                        // each gateway workload which routes to this destination.
                        .core.skv2.solo.io.ClusterObjectRef kube  = 3;

                        // Forwards the request to a cluster name matching the TLS SNI name
                        // https://www.envoyproxy.io/docs/envoy/latest/api-v2/config/filter/network/sni_cluster/empty/sni_cluster
                        // Note: This filter will only work properly with TLS connections in which the upstream SNI domain is specified
                        google.protobuf.Empty forward_sni_cluster_name = 4;

                    };
                    // Relative weight of this destination to others in the same route.
                    // If omitted, all destinations in the route will be load balanced between evenly.
                    uint32 weight = 5;
                }

            }

             message TcpOptions {
                TcpProxySettings tcp_proxy_settings = 1;

                message TcpProxySettings {
                    // Contains various settings for Envoy's tcp proxy filter.
                    // See here for more information: https://www.envoyproxy.io/docs/envoy/v1.10.0/api-v2/config/filter/network/tcp_proxy/v2/tcp_proxy.proto#envoy-api-msg-config-filter-network-tcp-proxy-v2-tcpproxy
                    google.protobuf.UInt32Value max_connect_attempts = 1;
                    google.protobuf.Duration idle_timeout = 2;

                    // If set, this configures tunneling, e.g. configuration options to tunnel multiple TCP
                    // payloads over a shared HTTP tunnel. If this message is absent, the payload
                    // will be proxied upstream as per usual.
                    TunnelingConfig tunneling_config = 3;

                    // Configuration for tunneling TCP over other transports or application layers.
                    message TunnelingConfig {
                        // The hostname to send in the synthesized CONNECT headers to the upstream proxy.
                        string hostname = 1;
                    }

                }
             }

        }
    }

    // TODO: Fill in more options
    message GatewayOptions {
        // gateway-level options (only apply to gateway/listener)

        // configure access logging service for all traffic on this gateway
        // als.options.gloo.solo.io.AccessLoggingService access_logging_service = 2;

        // Soft limit on size of the listener's new connection read and write buffers. If unspecified, defaults to 1MiB
        // For more info, check out the [Envoy docs](https://www.envoyproxy.io/docs/envoy/v1.17.1/api-v3/config/listener/v3/listener.proto)
        google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 1;

    }

}

message VirtualGatewayStatus{
    // The most recent generation observed in the the VirtualGateway metadata.
    // If the `observedGeneration` does not match `metadata.generation`,
    // Gloo Mesh has not processed the most recent version of this resource.
    int64 observed_generation = 1;

    // Any errors found while processing this generation of the resource.
    repeated string errors = 2;

    // Any warnings found while processing this generation of the resource.
    repeated string warnings = 3;

    repeated SelectedGatewayWorkload selected_gateways = 4;

    repeated .core.skv2.solo.io.ObjectRef selected_virtual_hosts = 5;

    // List of Delegated Route tables that this Route table delegates to
    repeated .core.skv2.solo.io.ObjectRef selected_route_tables = 6;


    // List of Istio Gateway CRs created by this VirtualGateway in each cluster
    map<string, .core.skv2.solo.io.ObjectRefList> created_istio_gateways = 7;

    // Relationships between objects
    // on Gw -> RTs selected
    // on Rts -> GWs selecting us + DRTs we sekect
    // on DRT -> which RTs select us

    // Optionally (via flag?) show DRTs on GW.

    // Optionally, show additive paths on Rts/DRTs. (might be too much, status too big. Further research needed)
    // - Maybe show the prefix that we're referenced by.

    // External address of the gateway, if there is one.
    // - Look at the service, get the LB IP (or nodeport), and publish here.
    // - Should be able to get this from the discovery payload (From the mesh)
}

// a gateway workload (e.g. Deployment) where a virtual gateway will be served
message SelectedGatewayWorkload {
    // the name of the gateway workload
    string name = 1;
    // the namespace where the gateway workload is running
    string namespace = 2;
    // the cluster where the gateway workload is running
    string cluster_name = 3;
    // the labels used to identify the gateway workload
    map<string, string> labels = 4;
    // the external URL by which the gateway can be accessed on the given workload, if it exists
    string external_url = 5;
}

// Note: This message needs to be at this level (rather than nested) due to cue restrictions.
message SDSConfig {
    // Target uri for the sds channel. currently only a unix domain socket is supported.
    string target_uri = 1;
    oneof sds_builder {
        // Call credentials.
        CallCredentials call_credentials = 2;
        // The name of the sds cluster in envoy
        string cluster_name = 3;
    }
    // The name of the secret containing the certificate
    string certificates_secret_name = 4;
    // The name of secret containing the validation context (i.e. root ca)
    string validation_context_name = 5;

    message CallCredentials {
        // Call credentials are coming from a file,
        FileCredentialSource file_credential_source = 1;
        message FileCredentialSource {
            // File containing auth token.
            string token_file_name = 1;
            // Header to carry the token.
            string header = 2;
        }
    }
}